# Test correctness results.
# Does not include command monitoring expectations or outcome assertions to make tests more readable.
# Requires libmongocrypt 1.7.0.
runOn:
  - minServerVersion: "6.2.0"
    # FLE 2 Encrypted collections are not supported on standalone.
    topology: [ "replicaset", "sharded", "load-balanced" ]
database_name: &database_name "default"
collection_name: &collection_name "default"
data: []
encrypted_fields: &encrypted_fields {{ yamlfile("encryptedFields-Range-Date.json") }}
key_vault_data: [ {{ yamlfile("keys/key1-document.json") }} ]
tests:
  - description: "Find with $gt"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments:
          document: &doc0 { _id: 0, encryptedDate: { $date: { $numberLong: "0" } } }
      - name: insertOne
        arguments:
          document: &doc1 { _id: 1, encryptedDate: { $date: { $numberLong: "1" } } }
      - name: find
        arguments:
          filter: { encryptedDate: { $gt: { $date: { $numberLong: "0" } } }}
        result: [*doc1]

  - description: "Find with $gte"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
      - name: insertOne
        arguments: { document: *doc1 }
      - name: find
        arguments:
          filter: { encryptedDate: { $gte: { $date: { $numberLong: "0" } } }}
          # sort so results from range queries are ordered.
          sort: { _id: 1 }
        result: [*doc0, *doc1]

  - description: "Find with $gt with no results"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
      - name: insertOne
        arguments: { document: *doc1 }
      - name: find
        arguments:
          filter: { encryptedDate: { $gt: { $date: { $numberLong: "1" } } }}
        result: []

  - description: "Find with $lt"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
      - name: insertOne
        arguments: { document: *doc1 }
      - name: find
        arguments:
          filter: { encryptedDate: { $lt: { $date: { $numberLong: "1" } } }}
        result: [*doc0]

  - description: "Find with $lte"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
      - name: insertOne
        arguments: { document: *doc1 }
      - name: find
        arguments:
          filter: { encryptedDate: { $lte: { $date: { $numberLong: "1" } } }}
          # sort so results from range queries are ordered.
          sort: { _id: 1 }
        result: [*doc0, *doc1]

  - description: "Find with $lt below min"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
      - name: insertOne
        arguments: { document: *doc1 }
      - name: find
        arguments:
          filter: { encryptedDate: { $lt: { $date: { $numberLong: "0" } } }}
        result:
          errorContains: must be greater than the range minimum

  - description: "Find with $gt above max"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
      - name: insertOne
        arguments: { document: *doc1 }
      - name: find
        arguments:
          filter: { encryptedDate: { $gt: { $date: { $numberLong: "200" } } }}
        result:
          errorContains: must be less than the range maximum

  - description: "Find with $gt and $lt"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
      - name: insertOne
        arguments: { document: *doc1 }
      - name: find
        arguments:
          filter: { encryptedDate: { $gt: { $date: { $numberLong: "0" } }, $lt: { $date: {$numberLong: "2"}} }}
        result: [*doc1]

  - description: "Find with equality"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
      - name: insertOne
        arguments: { document: *doc1 }
      - name: find
        arguments:
          filter: { encryptedDate: { $date: { $numberLong: "0" } } }
        result: [*doc0]
      - name: find
        arguments:
          filter: { encryptedDate: { $date: { $numberLong: "1" } } }
        result: [*doc1]

  - description: "Find with full range"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
      - name: insertOne
        arguments: { document: *doc1 }
      - name: find
        arguments:
          filter: { encryptedDate: { $gte: { $date: {$numberLong: "0"}}, $lte: { $date: {$numberLong: "200"} } } }
          # sort so results from range queries are ordered.
          sort: { _id: 1 }
        result: [*doc0, *doc1]

  - description: "Find with $in"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
      - name: insertOne
        arguments: { document: *doc1 }
      - name: find
        arguments:
          filter: { encryptedDate: { $in: [ {$date: {$numberLong: "0"}} ] } }
        result: [*doc0]

  - description: "Insert out of range"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments:
          document: { _id: 0, encryptedDate: {$date: { $numberLong: "-1" }}}
        result:
          errorContains: value must be greater than or equal to the minimum value

  - description: "Insert min and max"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments:
          document: *doc0
      - name: insertOne
        arguments:
          document: &doc200 { _id: 200, encryptedDate: { $date: { $numberLong: "200" } }}
      - name: find
        arguments:
          filter: {}
          # sort so results from range queries are ordered.
          sort: { _id: 1 }
        result: [*doc0, *doc200]

  - description: "Aggregate with $gte"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
      - name: insertOne
        arguments: { document: *doc1 }
      - name: aggregate
        arguments:
          pipeline:
          - { $match: { encryptedDate: { $gte: { $date: { $numberLong: "0" } } }} }
          # sort so results from range queries are ordered.
          - { $sort: { _id: 1 }}
        result: [*doc0, *doc1]

  - description: "Aggregate with $gt with no results"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
      - name: insertOne
        arguments: { document: *doc1 }
      - name: aggregate
        arguments:
          pipeline:
          - { $match: { encryptedDate: { $gt: { $date: { $numberLong: "1" } } }} }
        result: []

  - description: "Aggregate with $lt"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
      - name: insertOne
        arguments: { document: *doc1 }
      - name: aggregate
        arguments:
          pipeline:
          - { $match: { encryptedDate: { $lt: { $date: { $numberLong: "1" } } }} }
        result: [*doc0]

  - description: "Aggregate with $lte"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
      - name: insertOne
        arguments: { document: *doc1 }
      - name: aggregate
        arguments:
          pipeline:
          - { $match: { encryptedDate: { $lte: { $date: { $numberLong: "1" } } }} }
          # sort so results from range queries are ordered.
          - { $sort: { _id: 1 }}
        result: [*doc0, *doc1]

  - description: "Aggregate with $lt below min"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
      - name: insertOne
        arguments: { document: *doc1 }
      - name: aggregate
        arguments:
          pipeline:
          - { $match: { encryptedDate: { $lt: { $date: { $numberLong: "0" } } }} }
        result:
          errorContains: must be greater than the range minimum

  - description: "Aggregate with $gt above max"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
      - name: insertOne
        arguments: { document: *doc1 }
      - name: aggregate
        arguments:
          pipeline:
          - { $match: { encryptedDate: { $gt: { $date: { $numberLong: "200" } } }} }
        result:
          errorContains: must be less than the range maximum

  - description: "Aggregate with $gt and $lt"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
      - name: insertOne
        arguments: { document: *doc1 }
      - name: aggregate
        arguments:
          pipeline:
          - { $match: { encryptedDate: { $gt: { $date: { $numberLong: "0" } }, $lt: { $date: {$numberLong: "2"}} }} }
        result: [*doc1]

  - description: "Aggregate with equality"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
      - name: insertOne
        arguments: { document: *doc1 }
      - name: aggregate
        arguments:
          pipeline:
          - { $match: { encryptedDate: { $date: { $numberLong: "0" } } } }
        result: [*doc0]
      - name: aggregate
        arguments:
          pipeline:
          - { $match: { encryptedDate: { $date: { $numberLong: "1" } } } }
        result: [*doc1]

  - description: "Aggregate with full range"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
      - name: insertOne
        arguments: { document: *doc1 }
      - name: aggregate
        arguments:
          pipeline:
          - { $match: { encryptedDate: { $gte: {$date: {$numberLong: "0"}}, $lte: {$date: {$numberLong: "200"}} } } }
          # sort so results from range queries are ordered.
          - { $sort: { _id: 1 }}
        result: [*doc0, *doc1]

  - description: "Aggregate with $in"
    clientOptions:
      autoEncryptOpts:
        kmsProviders:
          local: {{ local_provider() }}
    operations:
      - name: insertOne
        arguments: { document: *doc0 }
      - name: insertOne
        arguments: { document: *doc1 }
      - name: aggregate
        arguments:
          pipeline:
          - { $match: { encryptedDate: { $in: [ {$date: {$numberLong: "0"}} ] } } }
        result: [*doc0]
